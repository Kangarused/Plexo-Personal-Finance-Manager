


















 


// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DefaultConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=localhost;Initial Catalog=PersonalFinance;Trusted_Connection=True;`
//     Schema:                 ``
//     Include Views:          `False`

//     Factory Name:          `SqlClientFactory`
using System;
using System.Data.Common;
using System.Data;
using System.Collections.Generic;
using ServiceStack.OrmLite;
using ServiceStack.DataAnnotations;

namespace StoredProcedures
{
	public static class SPList 
	{
		private static DbParameter CreateNewParameter(DbCommand dbCommand, string paramName, object paramValue, ParameterDirection paramDirection, DbType paramType)
		{
			DbParameter param = dbCommand.CreateParameter();
			param.Direction = paramDirection;
			param.DbType = paramType;
			param.ParameterName = paramName;
			param.Value = paramValue ?? DBNull.Value;
			return param;
		}

		public static OrmLiteSPStatement InsertUserClaim(this IDbConnection db, int? @userId = null, string @claimType = null, string @claimValue = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "InsertUserClaim";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"UserId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"ClaimType",@claimType,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"ClaimValue",@claimValue,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement InsertUserLogin(this IDbConnection db, int? @userId = null, string @loginProvider = null, string @providerKey = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "InsertUserLogin";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"UserId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"LoginProvider",@loginProvider,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"ProviderKey",@providerKey,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement DeleteUserLogin(this IDbConnection db, int? @userId = null, string @loginProvider = null, string @providerKey = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "DeleteUserLogin";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"UserId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"LoginProvider",@loginProvider,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"ProviderKey",@providerKey,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement SelectUser(this IDbConnection db, int? @id = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "SelectUser";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Id",@id,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement InsertUser(this IDbConnection db, Guid? @household = null, string @userName = null, string @name = null, string @email = null, string @passwordHash = null, string @securityStamp = null, bool? @isDeleted = null, bool? @isLockedOut = null, string @passwordResetToken = null, DateTimeOffset? @passwordResetExpiry = null, DateTimeOffset? @lockoutEndDate = null, int? @accessFailedCount = null, bool? @emailConfirmed = null, bool? @lockoutEnabled = null, string @phoneNumber = null, bool? @phoneNumberConfirmed = null, bool? @twoFactorEnabled = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "InsertUser";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Household",@household,ParameterDirection.Input,DbType.Guid));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"UserName",@userName,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Name",@name,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Email",@email,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PasswordHash",@passwordHash,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"SecurityStamp",@securityStamp,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"IsDeleted",@isDeleted,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"IsLockedOut",@isLockedOut,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PasswordResetToken",@passwordResetToken,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PasswordResetExpiry",@passwordResetExpiry,ParameterDirection.Input,DbType.DateTimeOffset));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"LockoutEndDate",@lockoutEndDate,ParameterDirection.Input,DbType.DateTimeOffset));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"AccessFailedCount",@accessFailedCount,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"EmailConfirmed",@emailConfirmed,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"LockoutEnabled",@lockoutEnabled,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PhoneNumber",@phoneNumber,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PhoneNumberConfirmed",@phoneNumberConfirmed,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"TwoFactorEnabled",@twoFactorEnabled,ParameterDirection.Input,DbType.Boolean));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement UpdateUser(this IDbConnection db, int? @id = null, Guid? @household = null, string @userName = null, string @name = null, string @email = null, string @passwordHash = null, string @securityStamp = null, bool? @isDeleted = null, bool? @isLockedOut = null, string @passwordResetToken = null, DateTimeOffset? @passwordResetExpiry = null, DateTimeOffset? @lockoutEndDate = null, int? @accessFailedCount = null, bool? @emailConfirmed = null, bool? @lockoutEnabled = null, string @phoneNumber = null, bool? @phoneNumberConfirmed = null, bool? @twoFactorEnabled = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "UpdateUser";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Id",@id,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Household",@household,ParameterDirection.Input,DbType.Guid));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"UserName",@userName,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Name",@name,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Email",@email,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PasswordHash",@passwordHash,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"SecurityStamp",@securityStamp,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"IsDeleted",@isDeleted,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"IsLockedOut",@isLockedOut,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PasswordResetToken",@passwordResetToken,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PasswordResetExpiry",@passwordResetExpiry,ParameterDirection.Input,DbType.DateTimeOffset));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"LockoutEndDate",@lockoutEndDate,ParameterDirection.Input,DbType.DateTimeOffset));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"AccessFailedCount",@accessFailedCount,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"EmailConfirmed",@emailConfirmed,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"LockoutEnabled",@lockoutEnabled,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PhoneNumber",@phoneNumber,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"PhoneNumberConfirmed",@phoneNumberConfirmed,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"TwoFactorEnabled",@twoFactorEnabled,ParameterDirection.Input,DbType.Boolean));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement DeleteUser(this IDbConnection db, int? @id = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "DeleteUser";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Id",@id,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement AddUserToRole(this IDbConnection db, int? @userId = null, string @roleName = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "AddUserToRole";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"userId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"roleName",@roleName,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement FindUserByEmail(this IDbConnection db, string @email = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "FindUserByEmail";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Email",@email,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement FindUserByLogin(this IDbConnection db, string @loginProvider = null, string @providerKey = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "FindUserByLogin";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"loginProvider",@loginProvider,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"providerKey",@providerKey,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement FindUserByUserName(this IDbConnection db, string @userName = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "FindUserByUserName";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"UserName",@userName,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetLoginsForUser(this IDbConnection db, int? @userId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetLoginsForUser";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"userId",@userId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetRolesForUser(this IDbConnection db, int? @userId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetRolesForUser";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"userId",@userId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetUserClaims(this IDbConnection db, int? @userId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetUserClaims";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"userId",@userId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement IsUserInRole(this IDbConnection db, int? @userId = null, string @roleName = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "IsUserInRole";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"userId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"roleName",@roleName,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement RemoveUserClaim(this IDbConnection db, int? @userId = null, string @claimType = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "RemoveUserClaim";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"userId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"claimType",@claimType,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement RemoveUserFromRole(this IDbConnection db, int? @userId = null, string @roleName = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "RemoveUserFromRole";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"userId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"roleName",@roleName,ParameterDirection.Input,DbType.String));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetAccountsByHousehold(this IDbConnection db, Guid? @household = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetAccountsByHousehold";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Household",@household,ParameterDirection.Input,DbType.Guid));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement InsertAccount(this IDbConnection db, int? @userId = null, Guid? @household = null, string @name = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "InsertAccount";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"UserId",@userId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Household",@household,ParameterDirection.Input,DbType.Guid));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Name",@name,ParameterDirection.Input,DbType.AnsiString));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement DeleteAccount(this IDbConnection db, int? @accountId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "DeleteAccount";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"AccountId",@accountId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetAccountById(this IDbConnection db, int? @accountId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetAccountById";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"AccountId",@accountId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetTransactionsByAccountId(this IDbConnection db, int? @accountId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetTransactionsByAccountId";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"AccountId",@accountId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetCategories(this IDbConnection db)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetCategories";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement InsertCategory(this IDbConnection db, string @name = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "InsertCategory";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Name",@name,ParameterDirection.Input,DbType.AnsiString));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement InsertTransaction(this IDbConnection db, int? @accountId = null, string @description = null, decimal? @amount = null, decimal? @reconciled = null, bool? @isReconciled = null, DateTimeOffset? @transactionDate = null, int? @updated_By = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "InsertTransaction";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"AccountId",@accountId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Description",@description,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Amount",@amount,ParameterDirection.Input,DbType.Decimal));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Reconciled",@reconciled,ParameterDirection.Input,DbType.Decimal));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"isReconciled",@isReconciled,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"TransactionDate",@transactionDate,ParameterDirection.Input,DbType.DateTimeOffset));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Updated_By",@updated_By,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement InsertTransactionCategory(this IDbConnection db, int? @transactionId = null, int? @categoryId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "InsertTransactionCategory";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"TransactionId",@transactionId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"CategoryId",@categoryId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement UpdateTransaction(this IDbConnection db, int? @id = null, string @description = null, decimal? @amount = null, decimal? @reconciled = null, bool? @isReconciled = null, int? @updated_By = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "UpdateTransaction";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Id",@id,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Description",@description,ParameterDirection.Input,DbType.String));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Amount",@amount,ParameterDirection.Input,DbType.Decimal));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Reconciled",@reconciled,ParameterDirection.Input,DbType.Decimal));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"isReconciled",@isReconciled,ParameterDirection.Input,DbType.Boolean));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Updated_By",@updated_By,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement UpdateTransactionCategory(this IDbConnection db, int? @transactionId = null, int? @categoryId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "UpdateTransactionCategory";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"TransactionId",@transactionId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"CategoryId",@categoryId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement DeleteTransaction(this IDbConnection db, int? @transactionId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "DeleteTransaction";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"TransactionId",@transactionId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement DeleteTransactionCategory(this IDbConnection db, int? @transactionId = null, int? @categoryId = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "DeleteTransactionCategory";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"TransactionId",@transactionId,ParameterDirection.Input,DbType.Int32));
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"CategoryId",@categoryId,ParameterDirection.Input,DbType.Int32));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetCategoryByName(this IDbConnection db, string @categoryName = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetCategoryByName";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"categoryName",@categoryName,ParameterDirection.Input,DbType.AnsiString));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

		public static OrmLiteSPStatement GetBudgetItemsByHousehold(this IDbConnection db, Guid? @household = null)
		{
			var dbCmd = (DbCommand)OrmLiteConfig.ExecFilter.CreateCommand(db).ToDbCommand();
			dbCmd.CommandText = "GetBudgetItemsByHousehold";
			dbCmd.CommandType = CommandType.StoredProcedure;
			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"Household",@household,ParameterDirection.Input,DbType.Guid));
 			dbCmd.Parameters.Add(CreateNewParameter(dbCmd,"__ReturnValue",0,ParameterDirection.ReturnValue,DbType.Int32));
			return new OrmLiteSPStatement(db, dbCmd);
		}

	}

	
}
 